name: Lint and Deploy

on:
  push:
    branches:
      - master

env:
  HOSTNAME: asia.gcr.io
  REGION: asia-northeast1

jobs:
  precheck:
    runs-on: ubuntu-latest

    outputs:
      is_app_changed: ${{ steps.branching.outputs.is_app_changed }}
      is_service_changed: ${{ steps.branching.outputs.is_service_changed }}
      is_infra_changed: ${{ steps.branching.outputs.is_infra_changed }}
      is_action_changed: ${{ steps.branching.outputs.is_action_changed }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - id: file_changes
        uses: trilom/file-changes-action@v1.2.4

      - id: branching
        uses: ./program/actions/branching
        with:
          files: ${{ steps.file_changes.outputs.files }}

  lint-app:
    needs: precheck
    if: "fromJson(needs.precheck.outputs.is_app_changed) && !contains(github.event.head_commit.message, '[skip ci]')"
    name: Lint app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Run Hadolint
        uses: brpaz/hadolint-action@v1.3.1
        with:
          dockerfile: ./program/backup-service/Dockerfile

      - name: Run ESLint
        run: yarn && yarn lint
        working-directory: ./program/nextjs

  lint-service:
    needs: precheck
    if: "fromJson(needs.precheck.outputs.is_service_changed) && !contains(github.event.head_commit.message, '[skip ci]')"
    name: Lint service
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Run Hadolint
        uses: brpaz/hadolint-action@v1.3.1
        with:
          dockerfile: ./program/backup-service/Dockerfile

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          working-directory: ./program/backup-service

  lint-infra:
    needs: precheck
    if: "fromJson(needs.precheck.outputs.is_infra_changed) && !contains(github.event.head_commit.message, '[skip ci]')"
    name: Lint infra
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: terraform fmt -check -diff
        working-directory: ./program/infra

  lint-action:
    needs: precheck
    if: "fromJson(needs.precheck.outputs.is_action_changed) && !contains(github.event.head_commit.message, '[skip ci]')"
    name: Lint action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          working-directory: ./program/actions/branching

  deploy-app:
    if: "!contains(github.event.head_commit.message, '[skip cd]')"
    name: Deploy "alive" Docker image
    needs: lint-app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create .env
        run: |
          echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env
          echo "FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }}" >> .env
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
        working-directory: ./program/nextjs

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - uses: ./program/actions/build-deploy-image
        with:
          project-id: ${{ secrets.GCP_PROJECT_ID }}
          service-name: alive
          working-directory: ./program/nextjs

  deploy-service:
    if: "!contains(github.event.head_commit.message, '[skip cd]')"
    name: Deploy "alive-backup-service" Docker image
    needs: lint-service
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - uses: ./program/actions/build-deploy-image
        with:
          project-id: ${{ secrets.GCP_PROJECT_ID }}
          service-name: alive-backup-service
          working-directory: ./program/backup-service

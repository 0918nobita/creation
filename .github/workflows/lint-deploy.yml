name: Lint and Deploy

on:
  push:
    branches:
      - master

env:
  HOSTNAME: gcr.io
  REGION: asia-northeast1

jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      files_changed: ${{ steps.file_changes.outputs.files }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - id: file_changes
        name: Collect changed files
        uses: trilom/file-changes-action@v1.2.4

  lint:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    name: Lint Code Base
    needs: precheck
    runs-on: ubuntu-latest
    steps:
      - name: Show changed files
        run: echo "${{ needs.precheck.outputs.files_changed }}"
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Lint Code Base
        uses: github/super-linter@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_GO: false
          VALIDATE_JAVASCRIPT_STANDARD: false
          VALIDATE_TYPESCRIPT_STANDARD: false

  deploy-alive:
    if: "!contains(github.event.head_commit.message, '[skip cd]')"
    name: Deploy "alive" Docker image
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create .env
        run: |
          echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env
          echo "FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }}" >> .env
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
        working-directory: ./program/nextjs

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud config set run/platform managed
          gcloud config set run/region ${REGION}
          gcloud auth configure-docker

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ env.HOSTNAME }}/${{ secrets.GCP_PROJECT_ID }}/cloudrun/alive \
            .
        working-directory: ./program/nextjs

      - name: Publish Docker image
        run: |
          docker push ${{ env.HOSTNAME }}/${{ secrets.GCP_PROJECT_ID }}/cloudrun/alive:latest

      - name: Deploy Docker image
        run: |
          gcloud run deploy \
            alive \
            --image ${{ env.HOSTNAME }}/${{ secrets.GCP_PROJECT_ID }}/cloudrun/alive:latest \
            --allow-unauthenticated

  deploy-alive-backup-service:
    if: "!contains(github.event.head_commit.message, '[skip cd]')"
    name: Deploy "alive-backup-service" Docker image
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud config set run/platform managed
          gcloud config set run/region ${REGION}
          gcloud auth configure-docker

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ env.HOSTNAME }}/${{ secrets.GCP_PROJECT_ID }}/cloudrun/alive-backup-service \
            .
        working-directory: ./program/backup-service

      - name: Publish Docker image
        run: |
          docker push ${{ env.HOSTNAME }}/${{ secrets.GCP_PROJECT_ID }}/cloudrun/alive-backup-service:latest

      - name: Deploy Docker image
        run: |
          gcloud run deploy \
            alive-backup-service \
            --image ${{ env.HOSTNAME }}/${{ secrets.GCP_PROJECT_ID }}/cloudrun/alive-backup-service:latest \
            --allow-unauthenticated
